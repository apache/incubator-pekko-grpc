plugins {
  id 'groovy'
  id 'java-gradle-plugin'
  id 'maven-publish'
  id 'com.palantir.git-version' version '0.10.1'
  id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
}

group = "org.apache.pekko"
// https://github.com/palantir/gradle-git-version/issues/97

def tag = "git describe --tags".execute().text.substring(1).split("-g")[0].replace("\n", "")
def finalVersion = (tag == versionDetails().lastTag.substring(1)) ? tag : tag.reverse().reverse() + "-" + versionDetails().gitHash.substring(0, 8)

version = finalVersion

gradlePlugin {
  plugins {
    pekkoGrpcPlugin {
      id = 'org.apache.pekko.grpc.gradle'
      implementationClass = 'org.apache.pekko.grpc.gradle.PekkoGrpcPlugin'
    }
  }
}

publishing {
    publications.withType(MavenPublication) {
        pom {
            name = "pekko-grpc-gradle-plugin"
            description = "Apache Pekko gRPC - Support for building streaming gRPC servers and clients on top of Pekko Streams."
            url = "https://pekko.apache.org/"
            licenses {
                license {
                    name = "Apache-2.0"
                    url = "https://www.apache.org/licenses/LICENSE-2.0.html"
                }
            }
            developers {
                developer {
                    id = 'contributors'
                    name = 'Contributors'
                    url = 'https://github.com/apache/incubator-pekko-grpc/graphs/contributors'
                    email = 'dev@pekko.apache.org'
                }
            }
            scm {
                connection = 'git@github.com:apache/incubator-pekko-grpc'
                url = 'https://github.com/apache/incubator-pekko-grpc'
            }
        }
    }
}

def getEnvVariable(String envVariableName) {
    String envVariableValue = System.getenv(envVariableName)
    if (envVariableValue == null)
        project.logger.error("${envVariableName} is null")
    else if (envVariableValue.isEmpty())
        project.logger.error("${envVariableName} is is empty")
    else if (envVariableValue.isBlank())
        project.logger.error("${envVariableName} is is blank")
    return envVariableValue
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri("https://repository.apache.org/service/local/")
            snapshotRepositoryUrl = uri("https://repository.apache.org/content/repositories/snapshots/")
            username = getEnvVariable("NEXUS_USER")
            password = getEnvVariable("NEXUS_PW")
        }
    }
}

jar {
  manifest {
    attributes 'Implementation-Version': project.version
  }
}

jar.dependsOn('copyLicenseToBuildResources')

tasks.register('copyLicenseToBuildResources', Copy) {
    from layout.projectDirectory.file("../LICENSE")
    from layout.projectDirectory.file("../NOTICE")
    from layout.projectDirectory.file("../DISCLAIMER")
    into layout.buildDirectory.dir("resources/main/META-INF")
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'com.google.protobuf:protobuf-gradle-plugin:0.8.19'
  implementation 'commons-lang:commons-lang:2.6'
  testImplementation('org.spockframework:spock-core:1.3-groovy-2.5')
}

test {
  systemProperty 'pekkoGrpcTest.pluginVersion', project.version
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
    showStandardStreams = false
  }
}
